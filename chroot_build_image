#!/bin/ash
# Simple wrapper script to build iSH root image in a chroot

# Check to be sure we are not running this in /tmp/AOK

# Read in vars
. AOK_VARS

# Get apk if not installed
if [ ! -f /sbin/apk ]; then
    echo "Installing APK"
    Files/bin/get_apk
fi

# Clean up previous run
if [ ! -f /tmp/AOK/build/BUILD_DONE ]; then  # Skip if we crashed during tar/compress
   rm -rf /tmp/AOK

   # Download the Alpine miniroot if we need to
   if [ ! -e /iCloud/AOK ]; then
      mkdir -p /iCloud/AOK
   fi

   cd /iCloud/AOK
   if [ ! -f alpine-minirootfs-$ALPINE_VERSION-x86.tar.gz ]; then
      echo "Caching miniroot"
      wget http://dl-cdn.alpinelinux.org/alpine/v3.12/releases/x86/alpine-minirootfs-$ALPINE_VERSION-x86.tar.gz
   fi

   # Build in /tmp
   echo "Create /tmp/AOK/build, copy stuff"
   mkdir -p /tmp/AOK/build
   tar cf - --exclude='.git' --exclude='./main' --exclude='./save' . | (cd /tmp/AOK/build;tar xf -)

   cd /tmp/AOK/build

   # Unzip Alpine
   gunzip -c alpine-minirootfs-$ALPINE_VERSION-x86.tar.gz | tar xf -

   # We need a valid resolv.conf
   cp /etc/resolv.conf /tmp/AOK/build/etc

   # And now for the main bit
   chroot /tmp/AOK/build ./build_image

   cd /tmp/AOK

   echo "Doing some cleanup"
   # Clean up
   mkdir build/AOK
   mv build/build_image build/AOK
   mv build/chroot_build_image build/AOK
   mv build/LICENSE build/AOK
   mv build/AOK_VARS build/AOK
   mv build/Files build/AOK
   mv build/Docs build/AOK
   mv build/alpine-minirootfs-$ALPINE_VERSION-x86.tar.gz build/AOK

# Tar up and zip the result
fi

cd /tmp/AOK/build

touch BUILD_DONE

echo "Archiving root fs image"

tar cf - . | gzip -9 > ../ALPINE_$ALPINE_VERSION-iSH-AOK_$AOK_VERSION.tgz

echo

echo "Archiving root fs image complete"

if [ ! -e /iCloud/AOK_Archive ]; then
    mkdir -p /iCloud/AOK_Archive
fi

cp /tmp/AOK/ALPINE_$ALPINE_VERSION-iSH-AOK_$AOK_VERSION.tgz /iCloud/AOK_Archive

rm BUILD_DONE # We're done, leaving around would be counter productive
